{"version":3,"sources":["app/hero.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;YAIA;gBAAA;gBAsBA,CAAC;gBApBC,+DAA+D;gBAC/D,mFAAmF;gBACnF,+BAAS,GAAT;oBAEE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAE,oBAAM,CAAE,CAAC;gBAEnC,CAAC,EAAC,gBAAgB;gBAElB,qBAAqB;gBACrB,iEAAiE;gBACjE,qCAAe,GAAf;oBAEE,MAAM,CAAC,IAAI,OAAO,CAAU,UAAA,OAAO;wBAEjC,UAAU,CAAE,cAAM,OAAA,OAAO,CAAE,oBAAM,CAAE,EAAjB,CAAiB,EAAE,IAAI,CAAE,CAAC;oBAE9C,CAAC,CAAC,CAAC;gBAEL,CAAC,EAAC,sBAAsB;gBArB1B;oBAF6C,0BAA0B;oBAEtE,iBAAU,EAAE;;+BAAA;gBAuBb,kBAAC;YAAD,CAtBA,AAsBC,IAAA;YAtBD,qCAsBC,CAAA,CAAC,kBAAkB","file":"app/hero.service.js","sourcesContent":["import { HEROES }     from './mock-heroes';  // An array of Hero objects\nimport { Injectable } from 'angular2/core';  // @Injectable() decorator\n\n@Injectable()\nexport class HeroService {\n\n  // Simulate the behavior of an ultra-fast, zero-latency server,\n  // by returning an immediately resolved promise with our mock heroes as the result.\n  getHeroes() {\n\n    return Promise.resolve( HEROES );\n\n  } // end getHeroes\n\n  // Returns a promise.\n  // Waits 2 seconds before resolving the promise with mock heroes.\n  getHeroesSlowly() {\n\n    return new Promise<Hero[]>( resolve => {\n\n      setTimeout( () => resolve( HEROES ), 2000 );\n\n    });\n\n  } // end getHeroesSlowly\n\n} // end HeroService\n"],"sourceRoot":"/source/"}